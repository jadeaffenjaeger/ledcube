ARM GAS  /tmp/ccP3X5za.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB64:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccP3X5za.s 			page 2


  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "gpio.h"
  38:Src/stm32f1xx_it.c **** 
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_spi1_tx;
  45:Src/stm32f1xx_it.c **** extern SPI_HandleTypeDef hspi1;
  46:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  47:Src/stm32f1xx_it.c **** uint8_t idx = 1;
  48:Src/stm32f1xx_it.c **** 
  49:Src/stm32f1xx_it.c **** /******************************************************************************/
  50:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  51:Src/stm32f1xx_it.c **** /******************************************************************************/
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /**
  54:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  55:Src/stm32f1xx_it.c **** */
  56:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  57:Src/stm32f1xx_it.c **** {
  26              		.loc 1 57 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  58:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  59:Src/stm32f1xx_it.c **** 
  60:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  61:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  64:Src/stm32f1xx_it.c **** }
  31              		.loc 1 64 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE64:
  36              		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	1
  38              		.global	HardFault_Handler
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HardFault_Handler:
  45              	.LFB65:
  65:Src/stm32f1xx_it.c **** 
  66:Src/stm32f1xx_it.c **** /**
  67:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  68:Src/stm32f1xx_it.c **** */
  69:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  70:Src/stm32f1xx_it.c **** {
  46              		.loc 1 70 0
  47              		.cfi_startproc
ARM GAS  /tmp/ccP3X5za.s 			page 3


  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  53 0000 FEE7     		b	.L3
  54              		.cfi_endproc
  55              	.LFE65:
  57              		.section	.text.MemManage_Handler,"ax",%progbits
  58              		.align	1
  59              		.global	MemManage_Handler
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	MemManage_Handler:
  66              	.LFB66:
  71:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  72:Src/stm32f1xx_it.c **** 
  73:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  74:Src/stm32f1xx_it.c ****   while (1)
  75:Src/stm32f1xx_it.c ****   {
  76:Src/stm32f1xx_it.c ****   }
  77:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  78:Src/stm32f1xx_it.c **** 
  79:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  80:Src/stm32f1xx_it.c **** }
  81:Src/stm32f1xx_it.c **** 
  82:Src/stm32f1xx_it.c **** /**
  83:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  84:Src/stm32f1xx_it.c **** */
  85:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  86:Src/stm32f1xx_it.c **** {
  67              		.loc 1 86 0
  68              		.cfi_startproc
  69              		@ Volatile: function does not return.
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L5:
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE66:
  78              		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	1
  80              		.global	BusFault_Handler
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	BusFault_Handler:
  87              	.LFB67:
  87:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  88:Src/stm32f1xx_it.c **** 
  89:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  90:Src/stm32f1xx_it.c ****   while (1)
  91:Src/stm32f1xx_it.c ****   {
ARM GAS  /tmp/ccP3X5za.s 			page 4


  92:Src/stm32f1xx_it.c ****   }
  93:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  94:Src/stm32f1xx_it.c **** 
  95:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  96:Src/stm32f1xx_it.c **** }
  97:Src/stm32f1xx_it.c **** 
  98:Src/stm32f1xx_it.c **** /**
  99:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 100:Src/stm32f1xx_it.c **** */
 101:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 102:Src/stm32f1xx_it.c **** {
  88              		.loc 1 102 0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.L7:
  95 0000 FEE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE67:
  99              		.section	.text.UsageFault_Handler,"ax",%progbits
 100              		.align	1
 101              		.global	UsageFault_Handler
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	UsageFault_Handler:
 108              	.LFB68:
 103:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 104:Src/stm32f1xx_it.c **** 
 105:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   while (1)
 107:Src/stm32f1xx_it.c ****   {
 108:Src/stm32f1xx_it.c ****   }
 109:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 112:Src/stm32f1xx_it.c **** }
 113:Src/stm32f1xx_it.c **** 
 114:Src/stm32f1xx_it.c **** /**
 115:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 116:Src/stm32f1xx_it.c **** */
 117:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 118:Src/stm32f1xx_it.c **** {
 109              		.loc 1 118 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.L9:
 116 0000 FEE7     		b	.L9
 117              		.cfi_endproc
 118              	.LFE68:
 120              		.section	.text.SVC_Handler,"ax",%progbits
ARM GAS  /tmp/ccP3X5za.s 			page 5


 121              		.align	1
 122              		.global	SVC_Handler
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	SVC_Handler:
 129              	.LFB69:
 119:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 120:Src/stm32f1xx_it.c **** 
 121:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****   while (1)
 123:Src/stm32f1xx_it.c ****   {
 124:Src/stm32f1xx_it.c ****   }
 125:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 128:Src/stm32f1xx_it.c **** }
 129:Src/stm32f1xx_it.c **** 
 130:Src/stm32f1xx_it.c **** /**
 131:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 132:Src/stm32f1xx_it.c **** */
 133:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 134:Src/stm32f1xx_it.c **** {
 130              		.loc 1 134 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 136:Src/stm32f1xx_it.c **** 
 137:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 138:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 141:Src/stm32f1xx_it.c **** }
 135              		.loc 1 141 0
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE69:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	DebugMon_Handler:
 149              	.LFB70:
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 145:Src/stm32f1xx_it.c **** */
 146:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 150              		.loc 1 147 0
 151              		.cfi_startproc
ARM GAS  /tmp/ccP3X5za.s 			page 6


 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 154:Src/stm32f1xx_it.c **** }
 155              		.loc 1 154 0
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE70:
 160              		.section	.text.PendSV_Handler,"ax",%progbits
 161              		.align	1
 162              		.global	PendSV_Handler
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	PendSV_Handler:
 169              	.LFB71:
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 158:Src/stm32f1xx_it.c **** */
 159:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 170              		.loc 1 160 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 167:Src/stm32f1xx_it.c **** }
 175              		.loc 1 167 0
 176 0000 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE71:
 180              		.section	.text.SysTick_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	SysTick_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	SysTick_Handler:
 189              	.LFB72:
 168:Src/stm32f1xx_it.c **** 
 169:Src/stm32f1xx_it.c **** /**
 170:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
ARM GAS  /tmp/ccP3X5za.s 			page 7


 171:Src/stm32f1xx_it.c **** */
 172:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 173:Src/stm32f1xx_it.c **** {
 190              		.loc 1 173 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 177:Src/stm32f1xx_it.c ****   HAL_IncTick();
 199              		.loc 1 177 0
 200 0002 FFF7FEFF 		bl	HAL_IncTick
 201              	.LVL0:
 178:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 202              		.loc 1 178 0
 203 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 204              	.LVL1:
 179:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 180:Src/stm32f1xx_it.c **** 
 181:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 182:Src/stm32f1xx_it.c **** }
 205              		.loc 1 182 0
 206 000a 08BD     		pop	{r3, pc}
 207              		.cfi_endproc
 208              	.LFE72:
 210              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 211              		.align	1
 212              		.global	DMA1_Channel3_IRQHandler
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu softvfp
 218              	DMA1_Channel3_IRQHandler:
 219              	.LFB73:
 183:Src/stm32f1xx_it.c **** 
 184:Src/stm32f1xx_it.c **** /******************************************************************************/
 185:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 186:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 187:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 188:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 189:Src/stm32f1xx_it.c **** /******************************************************************************/
 190:Src/stm32f1xx_it.c **** 
 191:Src/stm32f1xx_it.c **** /**
 192:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel3 global interrupt.
 193:Src/stm32f1xx_it.c **** */
 194:Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 195:Src/stm32f1xx_it.c **** {
 220              		.loc 1 195 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccP3X5za.s 			page 8


 224 0000 08B5     		push	{r3, lr}
 225              	.LCFI1:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 3, -8
 228              		.cfi_offset 14, -4
 196:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 197:Src/stm32f1xx_it.c **** 
 198:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 199:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi1_tx);
 229              		.loc 1 199 0
 230 0002 0248     		ldr	r0, .L17
 231 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 232              	.LVL2:
 200:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 201:Src/stm32f1xx_it.c **** 
 202:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 203:Src/stm32f1xx_it.c **** }
 233              		.loc 1 203 0
 234 0008 08BD     		pop	{r3, pc}
 235              	.L18:
 236 000a 00BF     		.align	2
 237              	.L17:
 238 000c 00000000 		.word	hdma_spi1_tx
 239              		.cfi_endproc
 240              	.LFE73:
 242              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 243              		.align	1
 244              		.global	TIM4_IRQHandler
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	TIM4_IRQHandler:
 251              	.LFB74:
 204:Src/stm32f1xx_it.c **** 
 205:Src/stm32f1xx_it.c **** /**
 206:Src/stm32f1xx_it.c **** * @brief This function handles TIM4 global interrupt.
 207:Src/stm32f1xx_it.c **** */
 208:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 209:Src/stm32f1xx_it.c **** {
 252              		.loc 1 209 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 10B5     		push	{r4, lr}
 257              	.LCFI2:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 4, -8
 260              		.cfi_offset 14, -4
 210:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 211:Src/stm32f1xx_it.c **** 
 212:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 213:Src/stm32f1xx_it.c ****      __HAL_TIM_SET_AUTORELOAD(&htim4, idx*100);
 261              		.loc 1 213 0
 262 0002 0B49     		ldr	r1, .L22
 263 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 264 0006 0B48     		ldr	r0, .L22+4
ARM GAS  /tmp/ccP3X5za.s 			page 9


 265 0008 0468     		ldr	r4, [r0]
 266 000a 6422     		movs	r2, #100
 267 000c 02FB03F2 		mul	r2, r2, r3
 268 0010 E262     		str	r2, [r4, #44]
 269 0012 C260     		str	r2, [r0, #12]
 214:Src/stm32f1xx_it.c ****  idx++;
 270              		.loc 1 214 0
 271 0014 0133     		adds	r3, r3, #1
 215:Src/stm32f1xx_it.c ****  idx = idx % 16;
 272              		.loc 1 215 0
 273 0016 03F00F03 		and	r3, r3, #15
 274 001a 0B70     		strb	r3, [r1]
 216:Src/stm32f1xx_it.c ****  if(idx == 0) idx = 1;
 275              		.loc 1 216 0
 276 001c 0BB9     		cbnz	r3, .L20
 277              		.loc 1 216 0 is_stmt 0 discriminator 1
 278 001e 0122     		movs	r2, #1
 279 0020 0A70     		strb	r2, [r1]
 280              	.L20:
 217:Src/stm32f1xx_it.c ****   
 218:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 281              		.loc 1 218 0 is_stmt 1
 282 0022 0448     		ldr	r0, .L22+4
 283 0024 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 284              	.LVL3:
 219:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 220:Src/stm32f1xx_it.c ****   toggle_led();
 285              		.loc 1 220 0
 286 0028 FFF7FEFF 		bl	toggle_led
 287              	.LVL4:
 221:Src/stm32f1xx_it.c **** 
 222:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 223:Src/stm32f1xx_it.c **** }
 288              		.loc 1 223 0
 289 002c 10BD     		pop	{r4, pc}
 290              	.L23:
 291 002e 00BF     		.align	2
 292              	.L22:
 293 0030 00000000 		.word	.LANCHOR0
 294 0034 00000000 		.word	htim4
 295              		.cfi_endproc
 296              	.LFE74:
 298              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 299              		.align	1
 300              		.global	SPI1_IRQHandler
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 304              		.fpu softvfp
 306              	SPI1_IRQHandler:
 307              	.LFB75:
 224:Src/stm32f1xx_it.c **** 
 225:Src/stm32f1xx_it.c **** /**
 226:Src/stm32f1xx_it.c **** * @brief This function handles SPI1 global interrupt.
 227:Src/stm32f1xx_it.c **** */
 228:Src/stm32f1xx_it.c **** void SPI1_IRQHandler(void)
 229:Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccP3X5za.s 			page 10


 308              		.loc 1 229 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312 0000 08B5     		push	{r3, lr}
 313              	.LCFI3:
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 230:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 0 */
 231:Src/stm32f1xx_it.c **** 
 232:Src/stm32f1xx_it.c ****   /* USER CODE END SPI1_IRQn 0 */
 233:Src/stm32f1xx_it.c ****   HAL_SPI_IRQHandler(&hspi1);
 317              		.loc 1 233 0
 318 0002 0248     		ldr	r0, .L26
 319 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 320              	.LVL5:
 234:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 1 */
 235:Src/stm32f1xx_it.c **** 
 236:Src/stm32f1xx_it.c ****   /* USER CODE END SPI1_IRQn 1 */
 237:Src/stm32f1xx_it.c **** }
 321              		.loc 1 237 0
 322 0008 08BD     		pop	{r3, pc}
 323              	.L27:
 324 000a 00BF     		.align	2
 325              	.L26:
 326 000c 00000000 		.word	hspi1
 327              		.cfi_endproc
 328              	.LFE75:
 330              		.global	idx
 331              		.section	.data.idx,"aw",%progbits
 332              		.set	.LANCHOR0,. + 0
 335              	idx:
 336 0000 01       		.byte	1
 337              		.text
 338              	.Letext0:
 339              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 340              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 341              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 342              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 343              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 344              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 345              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 346              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 347              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 348              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 349              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 350              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 351              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 352              		.file 15 "Inc/gpio.h"
 353              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 354              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccP3X5za.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccP3X5za.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccP3X5za.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccP3X5za.s:58     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:65     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccP3X5za.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:86     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccP3X5za.s:100    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:107    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccP3X5za.s:121    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:128    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccP3X5za.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccP3X5za.s:161    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:168    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccP3X5za.s:181    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccP3X5za.s:188    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccP3X5za.s:211    .text.DMA1_Channel3_IRQHandler:0000000000000000 $t
     /tmp/ccP3X5za.s:218    .text.DMA1_Channel3_IRQHandler:0000000000000000 DMA1_Channel3_IRQHandler
     /tmp/ccP3X5za.s:238    .text.DMA1_Channel3_IRQHandler:000000000000000c $d
     /tmp/ccP3X5za.s:243    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccP3X5za.s:250    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccP3X5za.s:293    .text.TIM4_IRQHandler:0000000000000030 $d
     /tmp/ccP3X5za.s:299    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccP3X5za.s:306    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccP3X5za.s:326    .text.SPI1_IRQHandler:000000000000000c $d
     /tmp/ccP3X5za.s:335    .data.idx:0000000000000000 idx
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_spi1_tx
HAL_TIM_IRQHandler
toggle_led
htim4
HAL_SPI_IRQHandler
hspi1
